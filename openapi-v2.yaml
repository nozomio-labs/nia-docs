openapi: 3.1.0
info:
  title: Nia AI API
  version: '2.0.0'
  description: |
    Nia AI API allows developers to index and query code repositories and documentation using advanced AI understanding.
    The API provides capabilities for:
    - Repository indexing and management
    - Documentation/website indexing and management
    - AI-powered unified search across code and documentation
    - Package source code search across npm, PyPI, crates.io, and Go modules (powered by Chroma)
    - Web search and deep research capabilities
    - Real-time status checking for indexing operations
    - Streaming responses for interactive applications
  
servers:
  - url: https://apigcp.trynia.ai/v2
    description: Production API
  - url: http://localhost:8000/v2
    description: Local development

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key
      description: API key must be provided in the Authorization header

  schemas:
    RepositoryRequest:
      type: object
      required:
        - repository
      properties:
        repository:
          type: string
          description: Repository identifier in owner/repo format or full GitHub URL (supports folder paths like owner/repo/tree/branch/folder)
          example: "microsoft/vscode"
        branch:
          type: string
          description: Branch to index (defaults to repository's default branch)
          example: "main"

    QueryRequest:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            type: object
            required:
              - role
              - content
            properties:
              role:
                type: string
                enum: [user, assistant]
              content:
                type: string
          description: Chat messages for context and query
          example:
            - role: user
              content: "How does the error handling work in this codebase?"
        repositories:
          type: array
          items:
            type: object
            required:
              - repository
            properties:
              repository:
                type: string
                description: Repository identifier in owner/repo format or owner/repo/tree/branch/folder for folder-indexed repos
          description: List of repositories to query
        data_sources:
          type: array
          items:
            oneOf:
              - type: string
                description: |
                  Flexible data source identifier (recommended). Can be:
                  - UUID (e.g., "550e8400-e29b-41d4-a716-446655440000")
                  - Display name (e.g., "Vercel AI SDK - Core")
                  - URL (e.g., "https://docs.trynia.ai/")
              - type: object
                required:
                  - source_id
                properties:
                  source_id:
                    type: string
                    description: Data source UUID identifier (legacy format)
              - type: object
                required:
                  - identifier
                properties:
                  identifier:
                    type: string
                    description: Flexible data source identifier
          description: |
            List of documentation/web sources to query. Supports flexible identifiers:
            - String format (recommended): ["Vercel AI SDK - Core", "https://docs.trynia.ai/"]
            - Legacy object format: [{"source_id": "uuid"}]
            - New object format: [{"identifier": "display-name-or-url"}]
        search_mode:
          type: string
          enum: [unified, repositories, sources]
          default: unified
          description: "Search mode: 'unified' searches both repos and docs, 'repositories' searches only code, 'sources' searches only documentation"
        stream:
          type: boolean
          default: false
          description: Whether to stream the response
        include_sources:
          type: boolean
          default: true
          description: Whether to include full source texts in the response (when false, only file paths are returned)

    RepositoryStatus:
      type: object
      required:
        - repository
        - branch
        - status
      properties:
        repository:
          type: string
          description: Repository identifier
        branch:
          type: string
          description: Branch being indexed
        status:
          type: string
          enum: [indexing, completed, indexed, error]
          description: Current indexing status
        progress:
          type: object
          description: Detailed progress information
          properties:
            percentage:
              type: number
              description: Progress percentage (0-100)
            stage:
              type: string
              description: Current stage of indexing
            message:
              type: string
              description: Progress message
        error:
          type: string
          description: Error message if status is 'error'

    RepositoryListItem:
      type: object
      properties:
        repository_id:
          type: string
          description: Unique identifier for the repository
        id:
          type: string
          description: Internal project ID for graph visualization
        repository:
          type: string
          description: Repository identifier in owner/repo format
        branch:
          type: string
          description: Indexed branch
        status:
          type: string
          enum: [indexing, indexed, completed, error]
        display_name:
          type: string
          description: Custom display name for the repository
        progress:
          type: object
          properties:
            percentage:
              type: number
            stage:
              type: string
            message:
              type: string
        error:
          type: string
          description: Error message if status is 'error'

    HierarchyResponse:
      type: object
      required:
        - repository_id
        - hierarchy_text
        - stats
      properties:
        repository_id:
          type: string
          description: The repository ID
        hierarchy_text:
          type: string
          description: Text representation of the file hierarchy
        stats:
          type: object
          description: Statistics about the hierarchy
          properties:
            total_files:
              type: integer
            total_directories:
              type: integer
            total_classes:
              type: integer
            total_methods:
              type: integer
        generated_at:
          type: string
          format: date-time
          description: When the hierarchy was generated
        options:
          type: object
          properties:
            include_classes:
              type: boolean
            include_methods:
              type: boolean
        hierarchy_tree:
          type: object
          description: Tree structure of the hierarchy (optional, when X-Include-Tree header is true)

    RenameRequest:
      type: object
      required:
        - new_name
      properties:
        new_name:
          type: string
          minLength: 1
          maxLength: 100
          description: New display name for the resource

    RenameRequestWithIdentifier:
      type: object
      required:
        - identifier
        - new_name
      properties:
        identifier:
          type: string
          description: |
            Flexible data source identifier. Can be:
            - UUID (e.g., "550e8400-e29b-41d4-a716-446655440000")
            - Display name (e.g., "Vercel AI SDK - Core")
            - URL (e.g., "https://docs.trynia.ai/")
        new_name:
          type: string
          minLength: 1
          maxLength: 100
          description: New display name for the resource

    WebSearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query
          example: "best practices for React hooks"
        num_results:
          type: integer
          minimum: 1
          maximum: 10
          default: 5
          description: Number of results to return
        category:
          type: string
          enum: [github, company, research, news, tweet, pdf, blog]
          description: Filter by content category
        days_back:
          type: integer
          description: Only show results from last N days
        find_similar_to:
          type: string
          format: uri
          description: URL to find similar content to

    WebSearchResponse:
      type: object
      properties:
        github_repos:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              owner_repo:
                type: string
              title:
                type: string
              summary:
                type: string
              highlights:
                type: array
                items:
                  type: string
              published_date:
                type: string
        documentation:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              title:
                type: string
              summary:
                type: string
              highlights:
                type: array
                items:
                  type: string
        other_content:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              title:
                type: string
              summary:
                type: string
        total_results:
          type: integer

    DeepResearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Research question for deep analysis
          example: "Compare the top 3 state management solutions for React with pros and cons"
        output_format:
          type: string
          description: Optional structure hint for the output (e.g., 'comparison table', 'pros and cons list')

    DeepResearchResponse:
      type: object
      properties:
        data:
          type: object
          description: Structured research data based on the query
        citations:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              title:
                type: string
              snippet:
                type: string
          description: Sources cited in the research
        status:
          type: string
          enum: [completed, failed]

    SourceContentRequest:
      type: object
      required:
        - source_type
        - source_identifier
      properties:
        source_type:
          type: string
          enum: [repository, documentation]
          description: Type of source to retrieve
        source_identifier:
          type: string
          description: |
            Identifier for the source:
            - For repositories: 'owner/repo:path/to/file' (e.g., 'facebook/react:src/React.js')
            - For documentation: The source URL
        metadata:
          type: object
          additionalProperties: true
          description: Optional metadata from search results to help locate the source

    SourceContentResponse:
      type: object
      properties:
        success:
          type: boolean
        content:
          type: string
          description: Full content of the source file or document
        metadata:
          type: object
          properties:
            repository:
              type: string
            file_path:
              type: string
            branch:
              type: string
            language:
              type: string
            url:
              type: string
            title:
              type: string
            source_type:
              type: string
        error:
          type: string
          description: Error message if retrieval failed

    PackageSearchGrepRequest:
      type: object
      required:
        - registry
        - package_name
        - pattern
      properties:
        registry:
          type: string
          enum: [crates_io, golang_proxy, npm, py_pi]
          description: Package registry to search
          example: "npm"
        package_name:
          type: string
          description: Name of the package to search
          example: "react"
        pattern:
          type: string
          description: Regex pattern to search for in the package source code
          example: "useState|useEffect"
        version:
          type: string
          description: Specific version to search (optional, defaults to latest)
          example: "18.2.0"
        language:
          type: string
          description: Language filter for search results
          example: "TypeScript"
        filename_sha256:
          type: string
          description: SHA256 hash of specific file to search in
        a:
          type: integer
          description: Number of lines after each match to include
        b:
          type: integer
          description: Number of lines before each match to include
        c:
          type: integer
          description: Number of lines before and after each match to include
        head_limit:
          type: integer
          description: Maximum number of results to return
          example: 10
        output_mode:
          type: string
          enum: [content, files_with_matches, count]
          default: content
          description: Format of the output results

    PackageSearchHybridRequest:
      type: object
      required:
        - registry
        - package_name
        - semantic_queries
      properties:
        registry:
          type: string
          enum: [crates_io, golang_proxy, npm, py_pi]
          description: Package registry to search
          example: "npm"
        package_name:
          type: string
          description: Name of the package to search
          example: "react"
        semantic_queries:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 5
          description: 1-5 semantic queries about the codebase
          example: ["How does React handle state updates?", "What are the main hooks available?"]
        version:
          type: string
          description: Specific version to search (optional, defaults to latest)
          example: "18.2.0"
        filename_sha256:
          type: string
          description: SHA256 hash of specific file to search in
        pattern:
          type: string
          description: Optional regex pattern for pre-filtering results
        language:
          type: string
          description: Language filter for search results
          example: "TypeScript"

    PackageSearchReadFileRequest:
      type: object
      required:
        - registry
        - package_name
        - filename_sha256
        - start_line
        - end_line
      properties:
        registry:
          type: string
          enum: [crates_io, golang_proxy, npm, py_pi]
          description: Package registry containing the file
          example: "npm"
        package_name:
          type: string
          description: Name of the package containing the file
          example: "react"
        filename_sha256:
          type: string
          description: SHA256 hash of the file to read (obtained from grep/hybrid search)
          example: "a1b2c3d4e5f6..."
        start_line:
          type: integer
          minimum: 1
          description: Starting line number (1-based, inclusive)
          example: 1
        end_line:
          type: integer
          minimum: 1
          description: Ending line number (1-based, inclusive)
          example: 100
        version:
          type: string
          description: Specific version of the package (optional, defaults to latest)
          example: "18.2.0"

    PackageSearchResponse:
      type: object
      description: Raw response from Chroma Package Search API
      properties:
        version_used:
          type: string
          description: Version of the package that was searched
          example: "18.2.0"
        results:
          type: array
          description: Search results from the package
          items:
            type: object
            description: Search result item (format varies by search type)
        truncation_message:
          type: string
          description: Message indicating if results were truncated

    DataSourceRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          description: URL to index (documentation or website)
          example: "https://docs.example.com"
        url_patterns:
          type: array
          items:
            type: string
          description: URL patterns to include in crawling (supports wildcards)
          example: ["https://docs.example.com/api/*", "https://docs.example.com/guides/*"]
        exclude_patterns:
          type: array
          items:
            type: string
          description: URL patterns to exclude from crawling
          example: ["/blog/*", "/changelog/*"]
        project_id:
          type: string
          description: Optional project ID to associate with
        max_age:
          type: integer
          description: Maximum age of cached content in seconds (for fast scraping)
        formats:
          type: array
          items:
            type: string
          description: Content formats to return
          example: ["markdown", "html"]
        only_main_content:
          type: boolean
          default: true
          description: Extract only main content (removes nav, ads, etc.)
        limit:
          type: integer
          default: 10000
          description: Maximum number of pages to crawl
        max_depth:
          type: integer
          default: 20
          description: Maximum crawl depth
        crawl_entire_domain:
          type: boolean
          default: true
          description: Whether to crawl the entire domain
        wait_for:
          type: integer
          default: 2000
          description: Time to wait for page to load in milliseconds
        include_screenshot:
          type: boolean
          default: true
          description: Include full page screenshot
        check_llms_txt:
          type: boolean
          default: true
          description: Check for llms.txt file for curated documentation URLs
        llms_txt_strategy:
          type: string
          enum: [prefer, only, ignore]
          default: prefer
          description: |
            How to use llms.txt if found:
            - prefer: Start with llms.txt URLs, then crawl additional pages if under limit
            - only: Only index URLs listed in llms.txt
            - ignore: Skip llms.txt check (traditional behavior)

    DataSourceResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the data source
        url:
          type: string
          description: The indexed URL
        file_name:
          type: string
          description: File name for text sources
        status:
          type: string
          enum: [pending, processing, completed, failed, error]
          description: Current indexing status
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        page_count:
          type: integer
          default: 0
          description: Number of pages indexed
        chunk_count:
          type: integer
          default: 0
          description: Number of chunks/embeddings created
        project_id:
          type: string
          description: Associated project ID if any
        source_type:
          type: string
          enum: [web, text]
          default: web
        is_active:
          type: boolean
          default: true
        display_name:
          type: string
          description: Custom display name for the data source
        error:
          type: string
          description: Error message if status is 'error' or 'failed'
        error_code:
          type: string
          description: Error code for programmatic error handling

    Error:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          description: Error message

  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RateLimitError:
      description: Rate limit has been exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Rate limit ceiling for the endpoint
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Number of requests remaining in the time window
        X-RateLimit-Reset:
          schema:
            type: string
            format: date-time
          description: Time when the rate limit resets
        X-Monthly-Limit:
          schema:
            type: integer
          description: Monthly request limit
        X-Monthly-Remaining:
          schema:
            type: integer
          description: Remaining requests for the month
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /repositories:
    get:
      summary: List all repositories
      description: List all indexed repositories for the authenticated user
      operationId: listRepositories
      tags:
        - Repositories
      responses:
        '200':
          description: List of repositories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepositoryListItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
    post:
      summary: Index a new repository
      description: |
        Start indexing a GitHub repository. The repository must be public or the request must include
        a GitHub token with appropriate access rights. Supports indexing specific folders within a repository
        by providing a path like "owner/repo/tree/branch/folder".
      operationId: indexRepository
      tags:
        - Repositories
      parameters:
        - name: X-GitHub-Token
          in: header
          required: false
          schema:
            type: string
          description: Optional GitHub token for private repository access
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryRequest'
      responses:
        '200':
          description: Repository indexing started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      repository_id:
                        type: string
                      status:
                        type: string
                      status_url:
                        type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /repositories/{repository_id}:
    get:
      summary: Get repository indexing status
      description: Check the current status of repository indexing
      operationId: getRepositoryStatus
      tags:
        - Repositories
      parameters:
        - name: repository_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the repository returned from the index endpoint
      responses:
        '200':
          description: Repository status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
    delete:
      summary: Delete a repository
      description: Remove an indexed repository from your account
      operationId: deleteRepository
      tags:
        - Repositories
      parameters:
        - name: repository_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the repository to delete
      responses:
        '200':
          description: Repository deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /repositories/{repository_id}/hierarchy:
    get:
      summary: Get repository file hierarchy
      description: |
        Get the file hierarchy for an indexed repository. This endpoint returns a text representation
        of the repository's file structure, optionally including class and method names.
      operationId: getRepositoryHierarchy
      tags:
        - Repositories
      parameters:
        - name: repository_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the repository
        - name: include_classes
          in: query
          required: false
          schema:
            type: boolean
            default: true
          description: Include class names in hierarchy
        - name: include_methods
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Include method names in hierarchy
        - name: X-Include-Tree
          in: header
          required: false
          schema:
            type: string
            enum: ["true", "false"]
          description: Include the full tree structure in response (can be large)
      responses:
        '200':
          description: Hierarchy retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyResponse'
        '400':
          description: Repository not fully indexed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /repositories/{repository_id}/rename:
    patch:
      summary: Rename a repository
      description: Update the display name of an indexed repository
      operationId: renameRepository
      tags:
        - Repositories
      parameters:
        - name: repository_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the repository to rename
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameRequest'
      responses:
        '200':
          description: Repository renamed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  repository_id:
                    type: string
                  display_name:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid request (e.g., empty name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /query:
    post:
      summary: Query indexed repositories and documentation
      description: |
        Send a query to get AI-powered insights about indexed repositories and/or documentation sources.
        Supports three search modes:
        - 'unified': Search across both repositories and documentation (default)
        - 'repositories': Search only code repositories
        - 'sources': Search only documentation sources (returns vector search results without LLM processing)
        Supports both streaming and non-streaming responses.
      operationId: query
      tags:
        - Query
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                  sources:
                    type: array
                    items:
                      oneOf:
                        - type: string
                        - type: object
                          properties:
                            file_path:
                              type: string
                            content:
                              type: string
                    description: Code snippets used to generate the response (included when include_sources=true)
                  source_paths:
                    type: array
                    items:
                      type: string
                    description: File paths of the code snippets (included when include_sources=false)
            text/event-stream:
              schema:
                type: string
                description: |
                  Stream of Server-Sent Events (SSE) with the following event types:
                  - sources: List of relevant code sources (when include_sources=true)
                  - source_paths: List of file paths without content (when include_sources=false)
                  - content: Chunks of the AI response
                  - error: Any errors that occur during streaming
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /web-search:
    post:
      summary: AI-powered web search
      description: |
        Perform an AI-powered web search to find relevant GitHub repositories, documentation, and other content.
        Supports filtering by category and time range, as well as finding similar content to a given URL.
      operationId: webSearch
      tags:
        - Search & Research
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSearchRequest'
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '503':
          description: Web search service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deep-research:
    post:
      summary: Deep research agent (Pro only)
      description: |
        Perform deep, multi-step research on a topic using advanced AI research capabilities.
        This endpoint is only available for Pro subscription users. The research agent will
        analyze multiple sources, synthesize information, and provide comprehensive answers
        with citations.
      operationId: deepResearch
      tags:
        - Search & Research
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeepResearchRequest'
      responses:
        '200':
          description: Research completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeepResearchResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Pro subscription required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '503':
          description: Research service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: Research task timed out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sources/content:
    post:
      summary: Get full source content
      description: |
        Retrieve the full content of a specific source file or document identified during search.
        This endpoint allows fetching complete content when the truncated search results are insufficient.
      operationId: getSourceContent
      tags:
        - Sources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceContentRequest'
      responses:
        '200':
          description: Source content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceContentResponse'
        '400':
          description: Invalid source type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /data-sources:
    get:
      summary: List all data sources
      description: List all indexed documentation and web sources for the authenticated user
      operationId: listDataSources
      tags:
        - Data Sources
      responses:
        '200':
          description: List of data sources retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSourceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
    post:
      summary: Index a new data source
      description: |
        Start indexing a documentation website or any web content.
        Supports advanced crawling options like URL patterns, content filtering, and llms.txt support.
      operationId: createDataSource
      tags:
        - Data Sources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSourceRequest'
      responses:
        '200':
          description: Data source indexing started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /data-sources/{source_id}:
    get:
      summary: Get data source details
      description: Get detailed information about a specific data source
      operationId: getDataSource
      tags:
        - Data Sources
      parameters:
        - name: source_id
          in: path
          required: true
          schema:
            type: string
          description: |
            Flexible data source identifier. Can be:
            - UUID (e.g., "550e8400-e29b-41d4-a716-446655440000")
            - Display name (e.g., "Vercel AI SDK - Core")
            - URL (e.g., "https://docs.trynia.ai/")
      responses:
        '200':
          description: Data source details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to data source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
    delete:
      summary: Delete a data source
      description: Remove an indexed data source from your account
      operationId: deleteDataSource
      tags:
        - Data Sources
      parameters:
        - name: source_id
          in: path
          required: true
          schema:
            type: string
          description: |
            Flexible data source identifier. Can be:
            - UUID (e.g., "550e8400-e29b-41d4-a716-446655440000")
            - Display name (e.g., "Vercel AI SDK - Core")
            - URL (e.g., "https://docs.trynia.ai/")
      responses:
        '200':
          description: Data source deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to data source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /data-sources/{source_id}/rename:
    patch:
      summary: Rename a data source (Legacy)
      description: Update the display name of an indexed data source using UUID identifier only
      operationId: renameDataSourceLegacy
      tags:
        - Data Sources
      parameters:
        - name: source_id
          in: path
          required: true
          schema:
            type: string
          description: UUID identifier of the data source to rename
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameRequest'
      responses:
        '200':
          description: Data source renamed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  source_id:
                    type: string
                  display_name:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid request (e.g., empty name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to data source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /data-sources/rename:
    patch:
      summary: Rename a data source (Flexible)
      description: Update the display name of an indexed data source using flexible identifier (recommended)
      operationId: renameDataSource
      tags:
        - Data Sources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameRequestWithIdentifier'
      responses:
        '200':
          description: Data source renamed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  source_id:
                    type: string
                  display_name:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid request (e.g., empty name, identifier not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied to data source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Data source not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /package-search/grep:
    post:
      summary: Search package source code with regex
      description: |
        Execute a grep-style regex search over the source code of a public package.
        This endpoint is useful for deterministically finding specific code patterns in packages
        before implementing solutions that use external dependencies. Supports multiple package
        registries including npm, PyPI, crates.io, and Go modules.
      operationId: packageSearchGrep
      tags:
        - Package Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageSearchGrepRequest'
      responses:
        '200':
          description: Package search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageSearchResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Chroma service error or package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /package-search/hybrid:
    post:
      summary: Search package source code with AI/semantic queries
      description: |
        Execute a hybrid semantic search over package source code using AI understanding
        and optional regex patterns. This allows for natural language queries about how
        packages implement specific features, combined with optional pre-filtering.
      operationId: packageSearchHybrid
      tags:
        - Package Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageSearchHybridRequest'
      responses:
        '200':
          description: Package search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageSearchResponse'
        '400':
          description: Invalid request parameters (e.g., too many semantic queries)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Chroma service error or package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /package-search/read-file:
    post:
      summary: Read specific lines from a package file
      description: |
        Read exact lines from a source file within a public package. This is useful for
        fetching complete file content when you already have the file SHA256 hash
        (typically obtained from grep or hybrid search results). Maximum 200 lines per request.
      operationId: packageSearchReadFile
      tags:
        - Package Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageSearchReadFileRequest'
      responses:
        '200':
          description: File content retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  version_used:
                    type: string
                    description: Version of the package
                  file_path:
                    type: string
                    description: Path of the file within the package
                  start_line:
                    type: integer
                    description: Starting line number
                  end_line:
                    type: integer
                    description: Ending line number
                  content:
                    type: string
                    description: File content for the specified line range
                  total_lines:
                    type: integer
                    description: Total number of lines in the file
        '400':
          description: Invalid request parameters (e.g., invalid line range)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Chroma service error or file not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: Repositories
    description: Repository indexing and status operations
  - name: Query
    description: AI-powered code and documentation querying operations
  - name: Data Sources
    description: Documentation and web content indexing operations
  - name: Search & Research
    description: Web search and deep research operations
  - name: Sources
    description: Source content retrieval operations
  - name: Package Search
    description: Chroma-powered package source code search across npm, PyPI, crates.io, and Go modules